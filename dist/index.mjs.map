{"version":3,"sources":["../src/esdrt.ts","../src/Cell.tsx","../src/utils.ts"],"sourcesContent":["\r\nimport React, { type FunctionComponent } from \"react\"\r\nimport Cell from \"./Cell\";\r\n// import { createRoot } from \"react-dom\"\r\ntype AnyClass<T = any> = new () => T;\r\ntype Dict = { [key: string]: any }\r\n\r\nexport type TPropsObject = {\r\n    [key: string]: {\r\n        type: \"string\" | \"number\" | \"boolean\" | \"object\" | \"function\" | \"array\",\r\n        default: any\r\n    }\r\n}\r\n\r\nexport interface TService<T> {\r\n    url: string;\r\n    method: \"get\" | \"post\";\r\n    params?: Dict;\r\n    body?: Dict;\r\n    headers?: (data: T) => any;\r\n}\r\n\r\n/**\r\n * 这个tango是有两个功能的\r\n * 1. 协助编辑器ast语法分析，用来做定位\r\n * 2. 协助编辑器列表生成，运行态的数据获取，tango会把数据挂在window上，让编辑器读取\r\n */\r\nexport const esdrt = {\r\n    // todo - 使用语法树生成\r\n    stores: {\r\n        // appstore: appStore\r\n    },\r\n    isStore: <T>(store: any) => {\r\n        return store\r\n    },\r\n    isPage: (page: React.ReactElement) => page,\r\n    // todo - implement service handler\r\n    // todo - with cache\r\n    isService: <T = Dict>(service: TService<T>) => (() => service as unknown as T),\r\n    isComponent: <T>(component: FunctionComponent<T>, propsDef: TPropsObject) => (props: any) => {\r\n\r\n        // 外面通过ast定义的\r\n        const compId = props.compId as string;\r\n        if (compId) {\r\n            return React.createElement(Cell, { mode: \"sandbox\", CompId: props.compId }, React.createElement(component, props))\r\n        } else {\r\n            return React.createElement(component, props)\r\n        }\r\n\r\n    },\r\n    init(x: any) {\r\n\r\n\r\n\r\n        window.addEventListener(\"message\", (e) => {\r\n            console.log(\"ssss\", e.data)\r\n\r\n\r\n            // 当用户把物料drop入iframe， 监听编辑器传递过来的drag事件\r\n            if (e.type == \"es-editor:dragenter\") {\r\n\r\n                // 1 在useDragStore设置外部拖入状态标识\r\n                useDragStore.getState().onParentDragEnter()\r\n            }\r\n\r\n            // 当用户把物料drop入iframe，监听编辑器传递drop事件\r\n            if (e.type == \"es-editor:drop\") {\r\n                // 定位到鼠标位置的cell compid 和insert 反向 并 传回给编辑器\r\n\r\n                useDragStore.getState().onParentDrop()\r\n            }\r\n\r\n            // 当用户把物料dragend入iframe， 监听编辑器传递过来的dragend事件\r\n            if (e.type == \"es-editor:dragend\") {\r\n                // 清除全部useDragStore状态信息\r\n                useDragStore.getState().resetAllStates()\r\n            }\r\n\r\n\r\n            // 当用户把物料drag 移出iframe， 监听编辑器传递过来的dragleave事件\r\n            if (e.type == \"es-editor:dragleave\") {\r\n                // 清除全部useDragStore状态信息\r\n                useDragStore.getState().resetAllStates()\r\n            }\r\n\r\n\r\n        })\r\n\r\n        window.parent.postMessage({\r\n            type: \"esdrt.init\"\r\n        }, \"*\")\r\n\r\n\r\n        window.addEventListener(\"click\", (e) => {\r\n\r\n            // 获取点击元素的attributes,dataset\r\n\r\n            // console.log(\"f\",e.target.attributes)\r\n            // console.log(\"ff\",e.target.dataset);\r\n\r\n        })\r\n\r\n        // 监听drag事件\r\n        // window.addEventListener(\"drag\", (e) => {\r\n        //     console.log(\"drag\",e.target)\r\n        // })\r\n\r\n        // 监听drop事件\r\n        // window.document.body.addEventListener(\"dragover\", (e) => {\r\n        //     console.log(\"dragover\", e.target)\r\n        //     e.stopPropagation()\r\n        //     e.preventDefault()\r\n        // })\r\n\r\n\r\n        // window.document.body.addEventListener(\"drop\", (e) => {\r\n        //     console.log(\"drop\", e.dataTransfer)\r\n        // })\r\n\r\n        // window.document.body.addEventListener(\"dragstart\", (e) => {\r\n        //     console.log(\"dragstart\", e.target)\r\n        // })\r\n\r\n        // window.document.body.addEventListener(\"dragend\", (e) => {\r\n        //     console.log(\"dragend\", e.target)\r\n        // })\r\n\r\n        // window.document.body.addEventListener(\"dragleave\", (e) => {\r\n        //     console.log(\"dragleave\", e.target)\r\n        // })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n    // init(mountElement: HTMLElement) {\r\n    //     console.log(\"tango init\")\r\n    //     const root = createRoot(mountElement)\r\n    //     root.render(React.createElement(RouterCreator,{}))\r\n    // }\r\n}\r\n\r\n\r\nimport { create } from 'zustand'\r\n\r\nexport type TDirection = \"top\" | \"bottom\" | \"left\" | \"right\" | \"center\" | null;\r\n\r\nexport const useDragStore = create<{\r\n    _isNewComp: boolean,\r\n    _direction: TDirection,\r\n\r\n    draggingId: string | null,\r\n    targetId: string | null,\r\n\r\n    onDragStart: (id: string) => boolean,\r\n    onDragEnter: (id: string | null) => void,\r\n    onDragLeave: () => void,\r\n    onDragEnd: () => void,\r\n    onDrop: () => void,\r\n    updateDirection: (d: TDirection) => void,\r\n\r\n    onParentDragEnter: () => void,\r\n    onParentDrop: () => void,\r\n    resetAllStates: () => void,\r\n    onMouseEnter: (id: string) => void,\r\n    onMouseLeave: (id: string) => void,\r\n}>((set, get) => ({\r\n    _direction: null,\r\n    _isNewComp: false,\r\n    draggingId: null,\r\n    targetId: null,\r\n\r\n    onDragStart: (id) => {\r\n        if (!get().draggingId) {\r\n            set({\r\n                draggingId: id\r\n            })\r\n            return true\r\n        }\r\n\r\n        return false\r\n\r\n    },\r\n    onDragEnter: (id) => set({ targetId: id }),\r\n    onDragLeave: () => set({ targetId: null }),\r\n    onDragEnd: () => {\r\n        get().resetAllStates();\r\n    },\r\n    onDrop: () => {\r\n        const { draggingId, targetId, _direction } = get()\r\n        if (draggingId && targetId) {\r\n            // todo - 发送通知给编辑器\r\n            console.log(\"drop!\", draggingId, \"-->\", targetId, \":\", _direction);\r\n        }\r\n    },\r\n    onMouseEnter: (id: string) => {\r\n        if (!get()._isNewComp) { return }\r\n\r\n        set({ targetId: id })\r\n    },\r\n    onMouseLeave: (id: string) => {\r\n        const { _isNewComp, resetAllStates } = get();\r\n        if (!_isNewComp) { return }\r\n        resetAllStates();\r\n    },\r\n    onParentDragEnter: () => {\r\n        get().resetAllStates();\r\n\r\n        set({ _isNewComp: true });\r\n    },\r\n    onParentDrop: () => {\r\n        const { targetId, _isNewComp, _direction, resetAllStates } = get();\r\n\r\n        if (!_isNewComp) {\r\n            resetAllStates();\r\n            return\r\n        }\r\n\r\n        if (targetId) {\r\n            console.log(\"drop!\", \"new material\", \"-->\", targetId, \":\", _direction);\r\n        }\r\n\r\n\r\n        resetAllStates();\r\n    },\r\n    resetAllStates: () => {\r\n        set({\r\n            targetId: null,\r\n            draggingId: null,\r\n            _isNewComp: false,\r\n            _direction: null\r\n        })\r\n    },\r\n    updateDirection: (d: TDirection) => {\r\n        const { targetId } = get();\r\n        if (targetId) {\r\n            set({ _direction: d })\r\n        }\r\n    }\r\n}))\r\n\r\n\r\n//subscribe 监听DragStore的draggingId和targetId变化,打印到控制台\r\n\r\n\r\n\r\nconst unsub3 = useDragStore.subscribe(\r\n    (s, pres) => console.log(\"dragging  \", pres.draggingId, \"--->\", s.draggingId),\r\n)\r\n\r\nconst unsub4 = useDragStore.subscribe(\r\n    (s, pres) => console.log(\"target  \", pres.targetId, \"--->\", s.targetId),\r\n)\r\n","import { PropsWithChildren, useEffect, useRef, useState } from \"react\";\r\n\r\nimport \"./cell.css\"\r\nimport { TDirection, useDragStore } from \"./esdrt\";\r\nimport { cn } from \"./utils\";\r\nimport React from \"react\";\r\n\r\n\r\nfunction Cell(props: PropsWithChildren<{\r\n    mode: \"sandpack\" | \"sandbox\",\r\n    CompId: string\r\n}>) {\r\n\r\n\r\n\r\n    // 生成唯一的随机id\r\n    // 不可以在运行态分配id，因为这样会导致编辑器无法定位语法树\r\n    // const cId = useRef<string>(getUUId())\r\n\r\n\r\n    const [insertType, setInsertType] = useState<TDirection>(null);\r\n\r\n    const dragStart = useDragStore((state) => state.onDragStart)\r\n    const dragEnter = useDragStore((state) => state.onDragEnter)\r\n    const dragLeave = useDragStore((state) => state.onDragLeave)\r\n    const mouseEnter = useDragStore((state) => state.onMouseEnter)\r\n    const mouseLeave = useDragStore((state) => state.onMouseLeave)\r\n    const dragEnd = useDragStore((state) => state.onDragEnd)\r\n    const onDrop = useDragStore((state) => state.onDrop)\r\n    // const setDraggingId = useDragStore((state) => state.setDraggingId)\r\n    // const targetId = useDragStore((state) => state.targetId);\r\n    const draggingId = useDragStore((state) => state.draggingId);\r\n    // const setTargetId = useDragStore((state) => state.setTargetId);\r\n    // const updateDirection = useDragStore((state) => state.updateDirection)\r\n\r\n\r\n    const isNewComp = useDragStore((state) => state._isNewComp == true);\r\n\r\n    const isDragSelf = useDragStore((state) => state.draggingId === props.CompId)\r\n\r\n\r\n\r\n\r\n\r\n    const onDragOver = (e: React.DragEvent) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        if (!draggingId || isDragSelf) {\r\n            return\r\n        }\r\n\r\n        const rect = e.currentTarget.getBoundingClientRect();\r\n        const x = e.clientX - rect.left;\r\n        const y = e.clientY - rect.top;\r\n        const w = rect.width;\r\n        const h = rect.height;\r\n\r\n        // 把区域划分为四个方向，按照斜对角方向划分\r\n        let direct: TDirection = null\r\n        // 斜对角线\r\n        const fny = (x) => (w / h) * x;\r\n        const fnx = (y) => ((w - y) / h) * w;\r\n\r\n        if (y < fny(x)) {\r\n            x < fnx(y) ? (direct = \"top\") : (direct = \"right\");\r\n        } else {\r\n            x < fnx(y) ? (direct = \"right\") : (direct = \"bottom\");\r\n        }\r\n\r\n        setInsertType(direct);\r\n        useDragStore.getState().updateDirection(direct);\r\n\r\n    }\r\n\r\n    const onDragEnter = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n\r\n        if (!draggingId || isDragSelf) {\r\n            return\r\n        }\r\n\r\n        // setTargetId(props.CompId)\r\n\r\n        dragEnter(props.CompId)\r\n    }\r\n\r\n    const onDragLeave = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        if (!draggingId || isDragSelf) {\r\n            return\r\n        }\r\n\r\n        dragLeave()\r\n\r\n        // 复位自身\r\n        if (insertType) {\r\n            setInsertType(null)\r\n        }\r\n    }\r\n\r\n    const onDragEnd = (e: React.DragEvent<HTMLDivElement>) => {\r\n        // 复位自身\r\n        if (insertType) {\r\n            setInsertType(null)\r\n        }\r\n\r\n        dragEnd()\r\n    }\r\n\r\n    const onDragStart = () => {\r\n        if(isNewComp) { return}\r\n        dragStart(props.CompId);\r\n    }\r\n\r\n\r\n    const onMouseEnter = ()=>{\r\n        if(!isNewComp) { return}\r\n        mouseEnter(props.CompId)\r\n    }\r\n\r\n    const onMouseLeave = ()=>{\r\n        if(!isNewComp) { return}\r\n        if (insertType) {\r\n            setInsertType(null)\r\n        }\r\n        mouseLeave(props.CompId)\r\n    }\r\n\r\n    const onMouseMove = (e: React.MouseEvent<HTMLDivElement, MouseEvent>)=>{\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        if(!isNewComp) { return}\r\n\r\n        if (isDragSelf) {\r\n            return\r\n        }\r\n\r\n        const rect = e.currentTarget.getBoundingClientRect();\r\n        const x = e.clientX - rect.left;\r\n        const y = e.clientY - rect.top;\r\n        const w = rect.width;\r\n        const h = rect.height;\r\n\r\n        // 把区域划分为四个方向，按照斜对角方向划分\r\n        let direct: TDirection = null\r\n        // 斜对角线\r\n        const fny = (x) => (w / h) * x;\r\n        const fnx = (y) => ((w - y) / h) * w;\r\n\r\n        if (y < fny(x)) {\r\n            x < fnx(y) ? (direct = \"top\") : (direct = \"right\");\r\n        } else {\r\n            x < fnx(y) ? (direct = \"right\") : (direct = \"bottom\");\r\n        }\r\n\r\n        setInsertType(direct);\r\n        useDragStore.getState().updateDirection(direct);\r\n    }\r\n\r\n\r\n    return <div\r\n        data-esd-id={props.CompId}\r\n        draggable\r\n        onMouseEnter={onMouseEnter}\r\n        onMouseLeave={onMouseLeave}\r\n        onMouseMove={onMouseMove}\r\n        onDragStart={onDragStart}\r\n        onDragEnd={onDragEnd}\r\n        onDragOver={onDragOver}\r\n        onDragLeave={onDragLeave}\r\n        onDragEnter={onDragEnter}\r\n        onDrop={onDrop}\r\n        className={cn(\"cell\", isDragSelf && \"dragging-self\")}\r\n    >\r\n        {props.children}\r\n\r\n        <div className={cn(insertType && `${insertType}-inside`)} />\r\n\r\n    </div>;\r\n}\r\n\r\n\r\nexport default React.memo(Cell)","\r\n\r\nexport function cn(...classes: string[]) {\r\n    return classes.filter(Boolean).join(' ')\r\n}"],"mappings":"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","names":["React","x","y","React"]}